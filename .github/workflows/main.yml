name: CICD Test
run-name: Running
on:
  push:
    branches:
      - main
      - 'releases/**'

env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: app-release-files
  AWS_CODE_DEPLOY_APPLICATION: cicid-test-CD
  AWS_CODE_DEPLOY_GROUP: cicd-test-CD-group

jobs:
  build-with-gradle:
    # Use the official Amazon Linux 2 Docker image
    runs-on: ubuntu-latest
    container:
      image: amazonlinux:2
      options: --privileged  # Required for certain installations

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        # Remove the 'ref' to dynamically checkout the branch that triggered the workflow
        # If you need to checkout a specific branch, ensure it's correctly referenced
        # with:
        #   ref: ${{ github.ref }}

      - name: Update System and Install Dependencies
        run: |
          yum update -y
          yum install -y wget unzip zip git

      - name: Install Java 21 (Amazon Corretto)
        run: |
          # Import the Amazon Corretto public key
          rpm --import https://yum.corretto.aws/corretto.key
          
          # Add the Corretto repository
          curl -Lo /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
          
          # Install Corretto 21
          yum install -y java-21-amazon-corretto-devel
          
          # Set JAVA_HOME and update PATH
          echo "export JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto" >> ~/.bashrc
          echo "export PATH=\$JAVA_HOME/bin:\$PATH" >> ~/.bashrc
          source ~/.bashrc
          
          # Verify installation
          java -version

      - name: Install Gradle
        run: |
          GRADLE_VERSION=8.4.1  # Specify the Gradle version you need
          wget https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp
          unzip /tmp/gradle-${GRADLE_VERSION}-bin.zip -d /opt/gradle
          ln -s /opt/gradle/gradle-${GRADLE_VERSION}/bin/gradle /usr/bin/gradle
          
          # Verify installation
          gradle --version

      - name: Grant Execute Permission for Gradlew
        run: chmod +x ./gradlew

      - name: Build Project with Gradle
        run: ./gradlew clean build -x test

      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Verify installation
          aws --version

      - name: Configure AWS Credentials
        # Update to the latest version of the action
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}

      - name: Package Artifacts for Deployment
        run: |
          mkdir -p deployment_package
          
          # Adjust the path to your build artifacts as needed
          cp build/libs/*.jar deployment_package/
          
          # Navigate to the deployment package directory
          cd deployment_package
          
          # Create a ZIP archive of the deployment package
          zip -r ../$GITHUB_SHA.zip .
          
          # Navigate back to the root directory
          cd ..
          
          # Ensure the 'cicdtest' directory exists in S3
          aws s3 mb s3://$AWS_S3_BUCKET/cicdtest --region $AWS_REGION || true  # Ignore if it already exists

      - name: Upload to S3
        run: |
          aws s3 cp $GITHUB_SHA.zip s3://$AWS_S3_BUCKET/cicdtest/$GITHUB_SHA.zip

      - name: Push to CodeDeploy
        run: |
          aws deploy push \
            --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
            --ignore-hidden-files \
            --s3-location s3://$AWS_S3_BUCKET/cicdtest/$GITHUB_SHA.zip \
            --source .

      - name: Create Deployment in CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} \
            --s3-location bucket=$AWS_S3_BUCKET,key=cicdtest/$GITHUB_SHA.zip,bundleType=zip
